They take a stream of events in the form of input (stocking shelves, unloading trucks) and output (sales, theft, waste). A lot of places set this up using a database design technique called Event Sourcing, but oftentimes you'll get something terrible like a giant state-based system that are a massive pain to debug and refactor. My money is on the second one for most large grocers that have computer systems. They were probably written in the 80's, and are glued and rubber banded together as well. They also, somehow, require some totally unrelated, sensitive information to function because of a hair brained feature request from a decade ago that wasn't questioned and built hastily. And that's why we need all employees ID'd by SSN, and you need that SSN ID to add new inventory to your shelves because it had to be packed by *somebody*. Now you can't look at what's in stock without running a 45 second report (which is just a pdf of a really big view that someone set up 5 years ago and nobody wants to touch) that can kill the production database if you run it during the daytime hours, so you'll need to email a sysadmin to do that for you. What I meant by all this is that anything simple will be made disgusting and maddening the moment it enters the real world, including inventory management systems.