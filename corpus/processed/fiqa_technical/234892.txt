Yes, exactly. VaR is just a single tailed confidence interval. To go from model to strategy, you need to design some kind of indicator (i.e. when to buy and when to short or stay out). In practice, this will look like a large matrix with values ranging from -1 to 1 (corresponding to shorting and holding respectively) for each security and each day (or hour, or minute, or tick, etc.), which you then just multiply with the matrix of the stock returns. The resulting matrix will be your daily returns for each stock, you can then just row sum for daily returns of a portfolio, or calculate a cumulative product for cumulative returns. A simple example of an indicator would be something like a value of 1 when the price of the stock is below the 30 day moving average, and 0 otherwise. You can use a battery of econometric models to design these indicators, but the rest of the strategy design is essentially the same, and it's *relatively* easy to build a one-size-fits-all back-testing code. I'll try to edit this post later and link a blog that goes through some of the code. Edit: [Here](http://www.signalplot.com/simple-machine-learning-model-trade-spy/) is a post that discusses implementing a simple ML strategy. You can ignore most of the content but if you go through the github, you'll see how the ML model is implemented as a strategy. An even easier example can be found from [the github connected to this post](http://www.signalplot.com/how-to-measure-the-performance-of-a-trading-strategy/), where the author is just using a totally arbitrary signal. As you can see, deriving a signal can be a ton of work, but once you have, actually simulating the strategy can be done in just a few lines of code. Hopefully the author won't mind me linking his page here, but I find his coding style to be very clean and good for educational purposes.