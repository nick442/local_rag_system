"What do I mean by infrastructure? Well, if you're doing algorithmic trading, you have to have something monitoring data and making decisions on its own, presumably. How do you set that up? There are many ways, and some are better than others. First is a problem of scale. If you're a newbie starting out with some small set of equity tick data, perhaps just trades for instance, you can whip together something that can handle that pretty easily. Check out http://www.marketdatapeaks.com/ though. That's your messaging rates you have to deal with once you go full data feeds direct from all the exchanges. 6.65 million messages/events per second. That's a lot. And if you fall behind, you lose your lunch. Building a robust system that allows you to easily backtest and deploy strategies is crucial as well. The speed at which you're able to conduct the backtest matters a lot. Doing that rapidly, and accurately is not easy. For a broad market-data handling algo design (and now, clearly, for very specific things you can design one that'll handle stuff better for that one corner case, but this is for general algo trading), optimally you have some sort of setup where you have a: [feed handlers] -> [tickerplant] -> [mkt data subscribers/CEP] -> [order management system] -> [broker] in this setup you have feed handlers that are taking the raw exchange feeds and pushing them to a consolidated tickerplant, where CEP subscribers can come through and sub to the data they want (perhaps I just want ES futures on one, and only want to arb CMCSA and CMCSK on another -- you dont want each CEP subscriber getting your full feed for all tickers all the time, its a waste). so more or less, each independent strategy is its own subscriber to the tickerplant, taking whatever data it wants and only that data (could be ""give me all the trades and quotes for all nasdaq stocks, but not book depth"" for instance). your CEP does whatever maths it has to do to figure out trading decisions, and when it does, it sends it to your order management system which does your risk checks, etc (""do you have enough money to place this trade?"" ""do you already have a position in this?"" ""are you trading against yourself?"" .. million other things). your OMS knows how to talk to your broker/directly to the exchange depending on your setup. Assuming all your risk checks pass, off the order goes to the exchange, and it deals with the fill msgs, etc. Now, as far as speed is concerned - try to do all of this at 6.5 million events/second. It's hard. Some strats/cep subscribers will run faster than others, some are slower, some need to keep a full book to work while some work on just trades. Your OMS depending on if youre using only market data sources may need to keep its own book to place orders on behalf of your subscribers if they lack information about various markets (think all the twitter trading bots these days for instance), etc. If you look back at the above setup as well, you'll notice some interesting things. [tickerplant] -> [cep subscriber] portion can stay the same for live trading or backtesting. This is huge. The only thing that changes here for backtesting is that if you're trying to backtest, you can take historical data (query it out of your hopefully column-store database) and push it into your tickerplant rather than having it come from a live feed through the feed handler. Your tickerplant and cep subscriber will never know the difference, so you can use the same exact code for backtesting as you can for live. On the other end, you obviously cant send historical orders to your live broker, so you need to code a simulated OMS that does the backtest simulation (another huge piece of software to code that is hard to do well). But, for backtesting, your setup is staying largely the same except those two end pieces. This means that testing/deving/deploying strats can be pretty rapid, and uses the same code base for live and historical, which helps you eliminate bugs and have to code everything twice. Backtesting design: [historical mkt data db] -> [tickerplant] -> [mkt data subscribers/CEP] -> [order management system simulator/backtester] These are just a few of the many problems that you hit when trying to dev good infra. There are like a million more. Point was simply, it's complicated. And C++ is a good lang. I use a wide variety of languages depending on exactly whats going on and how fast the code needs to be. With a proper tickerplant design, youre using some ipc protocol so a subscriber can be coded in any language. Check out http://www.zeromq.org/ -- thats an excellent piece of software to use to make a tickerplant out of, think they even have a design for one in the docs if I recall. With that, your CEP subscribers can be in any language - perhaps pure C if you need the speed, perhaps .NET or Java if you dont (check out http://esper.codehaus.org/ for a Java implement of a CEP subscriber, nEsper for the C# port of that I believe). But I use C, C++, C#, python, R, x86 asm for a few very minor things, and a lang or two I can't mention here."