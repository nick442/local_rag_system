"So.. from a business perspective, this way of building a piece of software doesn't make any sense at all. To take their example of a book trading app.. how do you parse out the core function vs. the revised specifications adding features. The core function of most apps are dead-nuts simple. For the book trading app, the core functionality is a forum website, such as reddit. The need for an app which allows you to sell it is the value-add of the software, which is all in the features. Call the ""standard"" way of doing things, from a set specification, a ""top down"" design cycle. Call the ""new"" way of designing a ""bottom up"" design cycle. So now you have a ""minimum viable product"", which is now subject to all the pain of a top-down design cycle and you are back to where you started. Now, every bottom-up design cycle has a goal and its own minimum viable feature improvement.. so you are really back to a progression of top-down design cycles superimposed on bottom-up product feature set evolution. Making a real product that people use is always going to be a combination of top-down design driven from the business side, who determines the features that customers want (i.e. the minimum viable product), and bottom-up design cycles where engineering has to communicate what is possible to design in a certain time frame. There is always a tension between the forward looking business side which is trying to project what customers want and pushing engineering to schedule their creativity, and the engineering side which is trying to deliver creative product designs on an externally imposed schedule. This bottom-up design cycle is not unique to software. Where developing software differs from developing hardware is that software allows for this design cycle to be very short and very discrete. Software can be developed in discrete modules and linked together. Hardware is more integrated, thus having longer design cycles, but can still be designed using a minimum viable product with design cycles adding features incrementally. Look at the cell phone/smart phone hardware business for a good case study in this. Yearly design cycles, each design cycle has a minimum viable feature set and some stretch goals, and work on feature sets stop when the clock runs out. But to think that software is magic, should be driven entirely bottom-up, doesn't have some sort of feature map superimposed on the workflow, is to get lost in an idealism. Better to use top-down and bottom-up design cycles as tools to navigate the business."