I had to implement a simplistic double-entry accounting system, and compiled a list of resources. Some of them are more helpful than others, but I'll share them all with you. Hope this helps! Simplifying accounting principles for computer scientists: http://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html See this excellent article on how Debits and Credits work: http://accountinginfo.com/study/je/je-01.htm See this article for an example Chart of Accounts with lots of helpful descriptions: http://www.netmba.com/accounting/fin/accounts/chart/ Excellent PDF by Martin Fowler on Accounting Patterns using an event-drive system: http://www.martinfowler.com/apsupp/accounting.pdf Additional useful resources by Martin Fowler: http://martinfowler.com/articles.html#ap Ideas on using Domain-Driven-Design (DDD): https://stackoverflow.com/questions/5482929/how-to-use-object-oriented-programming-with-hibernate Double Entry Accounting in Relational Databases: http://homepages.tcp.co.uk/~m-wigley/gc_wp_ded.html Double Entry Accounting in Rails: http://www.cuppadev.co.uk/dev/double-entry-accounting-in-rails/ Joda-Money: http://joda-money.sourceforge.net/ Joda-Money Notes: http://joda-money.svn.sourceforge.net/viewvc/joda-money/JodaMoney/trunk/Notes.txt?revision=75&view=markup Blog entry with good comments: http://www.jroller.com/scolebourne/entry/joda_money Related Blog Entry: http://www.jroller.com/scolebourne/entry/serialization_shared_delegates JMoney: http://jmoney.sourceforge.net/wiki/index.php/Main_Page JMoney QIF Plugin: http://jmoney.sourceforge.net/wiki/index.php/Qif_plug-in Ledger on GitHub: https://github.com/jwiegley/ledger/tree/master/src/ Implementing Money class in Java: http://www.objectivelogic.com/resources/Java%20and%20Monetary%20Data/Java%20and%20Monetary%20Data.pdf Martin Fowler's implementation in Patterns of Enterprise Application Architecture page 489, View partial content in Google Books: http://books.google.com/books?id=FyWZt5DdvFkC&printsec=frontcover&dq=Patterns+of+Enterprise+Application+Architecture&source=bl&ots=eEFp4xYydA&sig=96x5ER64m5ryiLnWOgGMKgAsDnw&hl=en&ei=Kr_wTP6UFJCynweEpajyCg&sa=X&oi=book_result&ct=result&resnum=7&ved=0CEQQ6AEwBg#v=onepage&q&f=false XML based API for an accounting service, might get some ideas from it: http://www.objacct.com/Platform.aspx