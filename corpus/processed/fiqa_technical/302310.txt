"The only thing worse than finding out you are paid less than a co-worker is finding out that you are paid more than all of your co-workers. A lot of people who *think* they would prefer an open and transparent pay-scale (as in unions), change their minds, when placed in one. I have worked in and implemented both types, as both an employee and as an owner/manager. There are pluses and minuses to both. - ""Transparent"" pay-scale is most effective in a high-turnover, aggressively performance-metric-oriented environment where you expect people to be competing for jobs, including their own job, every day. For example, a pool of commissioned sales-agents: the more you sell, the more you make. Winner gets a Cadillac. Runner-up gets a set of steak knives. Loser gets fired, that kind of thing. If you can't meet your numbers, we let other people start poaching your territory/clients and see what they can do. - Where it doesn't work is in a salary-type position where people are expected to have multiple ""soft"" duties outside of core performance metrics. The reasons are multi-fold: - One immediate effect of implementing performance-based pay for salary-type employees is that people who are in the office for 8 hours a day, five days a week, immediate start devoting their time and energy towards getting another notch up on the pay-scale, even at the expense of their co-workers, or the company. It intrinsically incentivizes ""gaming the system"", finding ways to attach your name to easy metrics, and to remove yourself from the most difficult problems. The people who are best at hitting metrics are often not even close to the MVPs. - If instead you take a ""soft metrics"" or subjective/holistic approach to evaluation, then you get a culture of brown-nosing and office-politics. People start sabotaging the ""boss's favorite"" and pursuing approval and credit, rather than performance. Instead of fostering a team-oriented, problem-solving approach, it fosters a counter-productive buck-passing, credit-grabbing, and blame-avoidance approach. Note that both of the above intrinsically incentivize risk-avoidance. If you get paid for the number of projects that have your name on them, you find some way to get your name attached to every project, and then move on to the next one, whether the last one was done or not. If you get based on how ""successful"" the projects bearing your name are, then you avoid anything challenging and make sure only to be attached to the easy ones with the best co-workers. And so on. - Alternately, let's say we keep the same, generic, salary-oriented pay-structure, we just make everyone in a certain ""tier"" get equal salary, that everyone knows. That sucks all the life out of everyone's sails so fast it will make your head spin: you cannot get a raise for doing a better job, you get paid the same raise as your worst co-worker, every year, for as long as you work here. We will never cut your pay, all you have to do is not be the canary in the coalmine-- so long as you can identify the worst performer in your group, and so long as it's not you, your job is safe. What time do you have to arrive? 5 minutes earlier than the latest-arriving person. How early can you leave? 5 minutes after the earliest one to check out. How much work do you have to get done? Only as much as anyone else is doing. What will you get for being the hardest-working, earliest-to-arrive, latest-to-leave? The same as the worst performer gets: you'll be splitting your raise with him, since we don't credit individuals here, just job-titles. Most jobs that can be easily automated, are automated. If you need a human employee to do it, it's usually because it involves a nontrivial amount of ""soft"" skills and fuzzy-logic type thinking and behavior. A machine programmed purely to make as many widgets per hour as possible, and motivated to so with human-style skills, ingenuity, and incentives, will tear down the whole factory and dismantle all its co-workers and ignore all quality-controls in order to keep producing widgets. You can't reduce human beings to input-process-output flowcharts (or rather you can, but they will invariably find unintended ways to outsmart your design criteria, with unintended consequences). The reason you need a person instead of an automated process is because you need a whole host hard-to-define, soft/fuzzy/flexible critical-thinking type skills. **Everyone's job seems easier to the people who don't have to do it, and there is a tremendous hidden danger to de-valuing personal desire to do a subjectively ""good job"" by quantifying/genericizing the value of their contribution.** Personnel management is very difficult to reduce to an engineering problem. You usually need good managers who can identify and motivate good employees, who will feel lucky to have the job and the salary they have, and who will come in every day trying to earn it. Posting everyone's pay on a bulletin-board negates all those ""soft"" skills, by putting a quantified, black-and-white, relative value on everyone's contribution. Even in a very large organization, the ""marketplace"" of employees is rarely large enough, and the quality of real-time metrics is almost never good enough to ""digitize"" the bell-curve of employee performance. You end up making it a square-wave that demotivates all but the most extreme outliers."